// old dashboard UI with basic smart contract

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Book Dashboard</title>

    <link rel="stylesheet" type="text/css" href="main.css">

    <script src="web3.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/web3@1.5.2/dist/web3.min.js"></script>

</head>

<body>
	<div class="container">

		<h1>The Book Dashboard</h1>
		<!-- Display a spinner while waiting for information -->
		<img id="loader" src="ajax-loader.gif">
		<h2 id="bookInfo"></h2>
	
		<label for="authorInput" class="col-lg-2 control-label">Author</label>
		<input id="authorInput" type="text">
	
		<label for="collectionInput" class="col-lg-2 control-label">Collection</label>
		<input id="collectionInput" type="text">
		
		<!-- Include label and input field for 'Number of Books'-->
		<label for="numberOfBooksInput" class="col-lg-2 control-label">Number of Books</label>
		<input id="numberOfBooksInput" type="number">
	
		<button id="button">Update Book</button>
	</div>
	
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script src="logic.js"></script>
</body>
</html>



window.addEventListener('load', async function() {
    if (typeof window.ethereum !== 'undefined') {
        await window.ethereum.request({ method: 'eth_requestAccounts' });
        const web3 = new Web3(window.ethereum);
        const contractAddress = '0xdD9e5F92fc424F4CD30f32129Fc9E763Fd6df7eE';
        const response = await fetch('ABI.json'); // Replace with the path to your contract's ABI
        const abi = await response.json();
        const contract = new web3.eth.Contract(abi, contractAddress);

        // Function to add a book
        document.getElementById('addBook').addEventListener('click', async () => {
            const title = document.getElementById('title').value;
            const author = document.getElementById('author').value;
            const collection = document.getElementById('collection').value;

            await contract.methods.addBook(title, author, collection).send({ from: window.ethereum.selectedAddress });
        });

        // Function to order a book
        document.getElementById('orderBook').addEventListener('click', async () => {
            const isbn = document.getElementById('isbn').value;

            await contract.methods.orderBook(isbn).send({ from: window.ethereum.selectedAddress });
        });

        // Function to check book availability
        document.getElementById('checkAvailability').addEventListener('click', async () => {
            const checkIsbn = document.getElementById('checkIsbn').value;

            const availability = await contract.methods.isBookAvailable(checkIsbn).call();
            alert(`Book is available: ${availability}`);
        });

       
        document.getElementById('getBookDetails').addEventListener('click', async () => {
            const detailsIsbn = document.getElementById('detailsIsbn').value;

            const bookDetails = await contract.methods.getBookDetails(detailsIsbn).call();
            const title = bookDetails.title;
            const author = bookDetails.author;
            const collection = bookDetails.collection;
            const available = bookDetails.available;

            document.getElementById('bookDetails').innerHTML = `Title: ${title}<br>Author: ${author}<br>Collection: ${collection}<br>Available: ${available}`;
        });
    } else {
        console.log('MetaMask not detected. Please install MetaMask extension.');
    }
});



//old dashboard logic with basic smart contract

window.addEventListener('load', async function() {
    // Check if MetaMask is available
    if (typeof window.ethereum !== 'undefined') {
      // Request access to the user's accounts
      await window.ethereum.request({ method: 'eth_requestAccounts' });
  
      // Initialize web3 with the injected provider from MetaMask
      web3 = new Web3(window.ethereum);
  
      // Set the contract address and ABI (if you have it)
      const myContractAddress = '0xdD9e5F92fc424F4CD30f32129Fc9E763Fd6df7eE';
      const response = await fetch('ABI.json'); // Replace with the path to your contract's ABI
      const abi = await response.json();
  
      // Create an instance of the contract
      const bookContract = new web3.eth.Contract(abi, myContractAddress);
  
      // Display the initial book information
      function displayBookInfo() {
        bookContract.methods.getBook().call(function (error, result) {
          if (!error) {
            const { author, collection, numberOfbooks } = result;
            $("#bookInfo").html('Author: ' + author + '<br/>' + 'Collection: ' + collection + '<br/>' + 'Number of Books: ' + numberOfbooks);
            console.log(result);
          } else {
            console.error(error);
          }
        });
      }
  
      displayBookInfo();
  
      // Listen for the 'bookEvent' event
      bookContract.events.bookEvent(
        function(error, result){
          if (!error) {
            $("#loader").hide();
            const { bookEvent_author, bookEvent_collection, bookEvent_numberOfbooks } = result.returnValues;
            $("#bookInfo").html('Author: ' + bookEvent_author + 'Collection: ' + bookEvent_collection + 'Number of Books: ' + bookEvent_numberOfbooks);
          } else {
            $("#loader").hide();
            console.log(error);
          }
        }
      );
  
      // Update the book info using the user-provided information
      $("#button").click(function () {
        const author = $("#authorInput").val();
        const collection = $("#collectionInput").val();
        const numberOfbooks = parseInt($("#numberOfBooksInput").val()); // Parse as an integer
  
        $("#loader").show();
  
        // Pass collected info to setBook contract method
        bookContract.methods.setBook(author, collection, numberOfbooks).send({from: window.ethereum.selectedAddress, gas: 5000000}, function(error, transactionHash) {
          if (!error) {
            // Transaction successful
            console.log("Transaction hash: " + transactionHash);
            displayBookInfo(); // Update the displayed information
          } else {
            $("#loader").hide();
            console.error(error);
          }
        });
      });
  
    } else {
      console.log('MetaMask not detected. Please install MetaMask extension.');
    }
  });
  
